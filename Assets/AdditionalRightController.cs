//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/AdditionalRightController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AdditionalRightController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AdditionalRightController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AdditionalRightController"",
    ""maps"": [
        {
            ""name"": ""Right"",
            ""id"": ""55080fc4-6665-4dd9-a01e-ccda408e8a79"",
            ""actions"": [
                {
                    ""name"": ""UIOPEN"",
                    ""type"": ""Button"",
                    ""id"": ""6620fd16-1fe4-47ef-8edf-cc238a79bcdf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""696e9adf-caa2-4eae-ab56-a858e481996e"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""UIOPEN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Right
        m_Right = asset.FindActionMap("Right", throwIfNotFound: true);
        m_Right_UIOPEN = m_Right.FindAction("UIOPEN", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Right
    private readonly InputActionMap m_Right;
    private IRightActions m_RightActionsCallbackInterface;
    private readonly InputAction m_Right_UIOPEN;
    public struct RightActions
    {
        private @AdditionalRightController m_Wrapper;
        public RightActions(@AdditionalRightController wrapper) { m_Wrapper = wrapper; }
        public InputAction @UIOPEN => m_Wrapper.m_Right_UIOPEN;
        public InputActionMap Get() { return m_Wrapper.m_Right; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightActions set) { return set.Get(); }
        public void SetCallbacks(IRightActions instance)
        {
            if (m_Wrapper.m_RightActionsCallbackInterface != null)
            {
                @UIOPEN.started -= m_Wrapper.m_RightActionsCallbackInterface.OnUIOPEN;
                @UIOPEN.performed -= m_Wrapper.m_RightActionsCallbackInterface.OnUIOPEN;
                @UIOPEN.canceled -= m_Wrapper.m_RightActionsCallbackInterface.OnUIOPEN;
            }
            m_Wrapper.m_RightActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UIOPEN.started += instance.OnUIOPEN;
                @UIOPEN.performed += instance.OnUIOPEN;
                @UIOPEN.canceled += instance.OnUIOPEN;
            }
        }
    }
    public RightActions @Right => new RightActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IRightActions
    {
        void OnUIOPEN(InputAction.CallbackContext context);
    }
}
